package sc.small.chat.personality.service;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import sc.small.chat.global.exception.SmallChatHttpException;import sc.small.chat.global.security.entity.User;import sc.small.chat.oauth.entity.OAuthProfile;import sc.small.chat.oauth.repository.OAuth2ProfileRepository;import sc.small.chat.personality.dto.OnBoardingDTO;import sc.small.chat.personality.entity.Personality;import sc.small.chat.personality.enums.PersonalityType;import sc.small.chat.personality.reposirtory.PersonalityRepository;@Slf4j@Service@RequiredArgsConstructorpublic class PersonalityService {    private final PersonalityRepository personalityRepository;    private final OAuth2ProfileRepository oAuth2ProfileRepository;    @Transactional    public OnBoardingDTO.Response savePersonality(OnBoardingDTO.Request onBoardingRequest) {        Personality personality = Personality.builder()            .personalityType(PersonalityType.typeOf(onBoardingRequest.personalityType()))            .build();        if(personality.getMember() != null) {            personality.setMember(getOAuthProfile().getMember());        }        personalityRepository.save(personality);        return new OnBoardingDTO.Response(            personality.getId(),            personality.getPersonalityType().getKoreaDisplayName(),            personality.getPersonalityType().getEnglishDisplayName()        );    }    private OAuthProfile getOAuthProfile() {        OAuthProfile oAuthProfile = oAuth2ProfileRepository.findByProviderId(            User.getCurrentUser().getOAuthProfileProviderId());        if (oAuthProfile == null) {            throw new SmallChatHttpException(HttpStatus.UNAUTHORIZED, "권한이 없는 사용자입니다.");        }        return oAuthProfile;    }}