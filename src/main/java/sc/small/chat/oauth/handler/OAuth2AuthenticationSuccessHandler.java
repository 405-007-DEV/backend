package sc.small.chat.oauth.handler;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.security.core.Authentication;import org.springframework.security.web.authentication.AuthenticationSuccessHandler;import org.springframework.stereotype.Component;import org.springframework.web.util.UriComponentsBuilder;import sc.small.chat.oauth.repository.OAuth2AuthorizationRequestBasedOnCookieRepository;import sc.small.chat.global.security.service.JwtProvider;@Slf4j@Component@RequiredArgsConstructorpublic class OAuth2AuthenticationSuccessHandler implements AuthenticationSuccessHandler {    @Value("${app.oauth2.authorized-redirect-uris}")    private String redirectUri;    private final JwtProvider jwtProvider;    private static final String URI = "/oauth2/success";    @Override    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {        // accessToken, refreshToken 발급        String accessToken = jwtProvider.generateAccessToken(authentication);        jwtProvider.generateRefreshToken(authentication, accessToken);        // 토큰 전달을 위한 redirect        String redirectUrl = UriComponentsBuilder.fromUriString(URI)            .queryParam("small_chat_access_token", accessToken)            .build().toUriString();        response.sendRedirect(redirectUrl);    }}