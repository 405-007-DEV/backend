package sc.small.chat.oauth.service;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.security.authentication.InternalAuthenticationServiceException;import org.springframework.security.core.AuthenticationException;import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;import org.springframework.security.oauth2.core.OAuth2AuthenticationException;import org.springframework.security.oauth2.core.user.OAuth2User;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import sc.small.chat.oauth.dto.OAuthProfileDTO;import sc.small.chat.oauth.entity.OAuthProfile;import sc.small.chat.oauth.enums.ProviderType;import sc.small.chat.oauth.repository.OAuth2ProfileRepository;import sc.small.chat.oauth.util.OAuth2UserInfo;import sc.small.chat.oauth.util.OAuth2UserInfoUtil;@Slf4j@Service@RequiredArgsConstructorpublic class CustomOAuth2UserService extends DefaultOAuth2UserService {    private final OAuth2ProfileRepository oAuth2ProfileRepository;    @Transactional    @Override    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {        OAuth2User user = super.loadUser(userRequest);        try {            return this.process(userRequest, user);        } catch (AuthenticationException ex) {            throw ex;        } catch (Exception ex) {            log.error("CustomOAuth2UserService loadUser Error: {} ", ex.getMessage());            throw new InternalAuthenticationServiceException(ex.getMessage(), ex.getCause());        }    }    private OAuth2User process(OAuth2UserRequest userRequest, OAuth2User user) {        ProviderType providerType = ProviderType.valueOf(userRequest.getClientRegistration().getRegistrationId().toUpperCase());        OAuth2UserInfo userInfo = OAuth2UserInfoUtil.getOAuth2UserInfo(providerType, user.getAttributes());        OAuthProfile oAuthProfile = oAuth2ProfileRepository.findByProviderId(userInfo.getProviderId());        if (oAuthProfile != null) {            OAuthProfileDTO.updateOAuthProfile(oAuthProfile, userInfo);        } else {            oAuthProfile = OAuthProfileDTO.createOAuthProfile(userInfo, providerType);            oAuth2ProfileRepository.saveAndFlush(oAuthProfile);        }        return OAuthProfileDTO.create(oAuthProfile, user.getAttributes());    }}