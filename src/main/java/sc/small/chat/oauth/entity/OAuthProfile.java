package sc.small.chat.oauth.entity;import jakarta.persistence.Column;import jakarta.persistence.Entity;import jakarta.persistence.FetchType;import jakarta.persistence.GeneratedValue;import jakarta.persistence.GenerationType;import jakarta.persistence.Id;import jakarta.persistence.JoinColumn;import jakarta.persistence.ManyToOne;import jakarta.persistence.Table;import lombok.AccessLevel;import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;import sc.small.chat.member.entity.Member;import sc.small.chat.oauth.utils.OAuth2UserInfo;@Getter@Entity@NoArgsConstructor(access = AccessLevel.PROTECTED)@Table(name = "oauth_profiles")public class OAuthProfile {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    @Column(name = "name")    private String name;    @Column(name = "email")    private String email;    @Column(name = "picture")    private String picture;    @Column(name = "provider_type")    private String providerType;    @Column(name = "provider_id")    private String providerId;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "member_id")    private Member member;    @Builder    public OAuthProfile(String name, String email, String picture, String providerType, String providerId) {        this.name = name;        this.email = email;        this.picture = picture;        this.providerType = providerType;        this.providerId = providerId;    }    public void updateProfileByAnotherProfile(OAuth2UserInfo userInfo) {        this.name = userInfo.getName();        this.email = userInfo.getEmail();        this.picture = userInfo.getPicture();        this.providerId = userInfo.getProviderId();    }}