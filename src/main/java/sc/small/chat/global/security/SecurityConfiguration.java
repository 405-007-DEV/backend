package sc.small.chat.global.security;import java.util.Arrays;import lombok.RequiredArgsConstructor;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.annotation.Order;import org.springframework.http.HttpHeaders;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer;import org.springframework.security.web.SecurityFilterChain;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.CorsConfigurationSource;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import sc.small.chat.global.security.urls.SecurityUrls;@Configuration@EnableWebSecurity@EnableMethodSecurity@RequiredArgsConstructorpublic class SecurityConfiguration {    private final SecurityUrls securityUrls;    /**     * 퍼블릭 경로 허용 설정 Bean 등록     * WebSecurityCustomizer.ignore() 처리가 권장되지 않는다고 warning이 출력되어 교체     * spring security 6.0 에서 HttpSecurity.requestMatcher(s) 제거됨     * @param http     * @return     * @throws Exception     */    @Bean    @Order(0)    public SecurityFilterChain allowPublicPathFilterChain(HttpSecurity http) throws Exception {        http            .securityMatcher(securityUrls.publicRequestMatcher()) // 특정 URL 패턴에 대해 보안 설정 적용            .authorizeHttpRequests(authorize -> authorize.anyRequest().permitAll()) // 모든 요청을 허용            .csrf(AbstractHttpConfigurer::disable) // CSRF 비활성화            .cors(AbstractHttpConfigurer::disable) // CORS 비활성화            .requestCache(RequestCacheConfigurer::disable) // 요청 캐시 비활성화            .sessionManagement(AbstractHttpConfigurer::disable); // 세션 관리 비활성화        return http.build();    }        @Bean    public CorsConfigurationSource corsConfigurationSource() {        CorsConfiguration configuration = new CorsConfiguration();        configuration.setAllowedOrigins(SecurityUrls.CORS_URLS); // 허용 urls        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE")); // 허용 method        configuration.setAllowedHeaders(Arrays.asList(HttpHeaders.AUTHORIZATION)); // 허용 헤더        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration("/**", configuration);        return source;    }}