package sc.small.chat.global.security.service;import static java.util.Collections.emptyList;import io.jsonwebtoken.*;import io.jsonwebtoken.security.Keys;import jakarta.annotation.PostConstruct;import jakarta.servlet.http.HttpServletRequest;import javax.crypto.SecretKey;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;import org.springframework.security.oauth2.core.oidc.user.OidcUser;import org.springframework.stereotype.Component;import java.util.Date;import org.springframework.util.StringUtils;import sc.small.chat.global.dto.TokenInfoDTO;import sc.small.chat.oauth.enums.ProviderType;import sc.small.chat.oauth.util.OAuth2UserInfo;import sc.small.chat.oauth.util.OAuthAttributes;@Slf4j@Component@RequiredArgsConstructorpublic class JwtProvider {    @Value("${jwt.secret-key-base}")    private String key;    private SecretKey secretKey;    private final TokenService tokenService;    private static final String AUTHORIZATION_HEADER = "Authorization";    private static final String BEARER_TYPE = "Bearer ";    private static final long ACCESS_TOKEN_EXPIRE_TIME = 24 * 60 * 60 * 1000L;          // 1일    private static final long REFRESH_TOKEN_EXPIRE_TIME = 30 * 24 * 60 * 60 * 1000L;    // 30일    private static final int ACCESS_TOKEN_EXPIRE_TIME_COOKIE = 24 * 60 * 60;   // 쿠키도 마찬가지로 1일    private static final int REFRESH_TOKEN_EXPIRE_TIME_COOKIE = 30 * 24 * 60 * 60; // 쿠키도 마찬가지로 30일    @PostConstruct    private void setSecretKey() {        secretKey = Keys.hmacShaKeyFor(key.getBytes());    }    public String generateAccessToken(Authentication authentication) {        return generateToken(authentication, ACCESS_TOKEN_EXPIRE_TIME);    }    // 1. refresh token 발급    public void generateRefreshToken(Authentication authentication, String accessToken) {        String refreshToken = generateToken(authentication, REFRESH_TOKEN_EXPIRE_TIME);        tokenService.saveOrUpdate(authentication.getName(), refreshToken, accessToken); // redis에 저장    }    private String generateToken(Authentication authentication, long expireTime) {        Date now = new Date();        Date expiredDate = new Date(now.getTime() + expireTime);        return Jwts.builder()            .subject(getUserInfo(authentication).getProviderId())            .claim("name", getUserInfo(authentication).getName())            .issuedAt(now)            .expiration(expiredDate)            .signWith(secretKey, Jwts.SIG.HS512)            .compact();    }    // 3. accessToken 재발급    public String reissueAccessToken(String accessToken) {        if (StringUtils.hasText(accessToken)) {            TokenInfoDTO token = tokenService.findByAccessTokenOrThrow(accessToken);            String refreshToken = token.getRefreshToken();            if (validateToken(refreshToken)) {                String reissueAccessToken = generateAccessToken(getAuthentication(refreshToken));                tokenService.updateToken(reissueAccessToken, token);                return reissueAccessToken;            }        }        return null;    }    public boolean validateToken(String token) {        if (!StringUtils.hasText(token)) {            return false;        }        Claims claims = parseClaims(token);        return claims.getExpiration().after(new Date());    }    // Request Header 에서 토큰 정보 추출    public String resolveToken(HttpServletRequest request) {        String bearerToken = request.getHeader(AUTHORIZATION_HEADER);        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith(BEARER_TYPE)) {            return bearerToken.substring(7);        }        return null;    }    private Claims parseClaims(String token) {        try {            return Jwts.parser().verifyWith(secretKey).build()                .parseSignedClaims(token).getPayload();        } catch (ExpiredJwtException e) {            log.error("Expired JWT Token", e);            return e.getClaims();        } catch (io.jsonwebtoken.security.SecurityException | MalformedJwtException e) {            log.error("Invalid JWT Token", e);            throw e;        } catch (UnsupportedJwtException e) {            log.error("Unsupported JWT Token", e);            throw e;        } catch (IllegalArgumentException e) {            log.error("JWT claims string is empty.", e);            throw e;        }    }    // JWT 토큰을 복호화하여 토큰에 들어있는 정보를 꺼내는 메서드    public Authentication getAuthentication(String accessToken) {        // 토큰 복호화        Claims claims = parseClaims(accessToken);        if (claims.getSubject()== null) {            throw new RuntimeException("권한 정보가 없는 토큰입니다.");        }        // UserDetails 객체를 만들어서 Authentication 리턴        UserDetails principal = new User(claims.getSubject(), "", emptyList());        return new UsernamePasswordAuthenticationToken(principal, "", emptyList());    }    public Long getExpiration(String token) {        Claims claims = parseClaims(token);        Date expiration = claims.getExpiration();        return expiration.getTime() - new Date().getTime();    }    private OAuth2UserInfo getUserInfo(Authentication authentication) {        OAuth2AuthenticationToken oAuth2AuthenticationToken = (OAuth2AuthenticationToken) authentication;        ProviderType providerType = ProviderType.valueOf(oAuth2AuthenticationToken.getAuthorizedClientRegistrationId().toUpperCase());        OidcUser user = ((OidcUser) authentication.getPrincipal());        return OAuthAttributes.getOAuth2UserInfo(providerType, user.getAttributes());    }//    public static int getRefreshTokenExpireTimeCookie() {//        return REFRESH_TOKEN_EXPIRE_TIME_COOKIE;//    }////    public static int getAccessTokenExpireTimeCookie() {//        return ACCESS_TOKEN_EXPIRE_TIME_COOKIE;//    }}