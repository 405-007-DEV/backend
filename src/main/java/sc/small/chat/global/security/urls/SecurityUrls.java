package sc.small.chat.global.security.urls;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import lombok.RequiredArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.core.env.Environment;import org.springframework.core.env.Profiles;import org.springframework.http.HttpMethod;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;import org.springframework.security.web.util.matcher.NegatedRequestMatcher;import org.springframework.security.web.util.matcher.OrRequestMatcher;import org.springframework.security.web.util.matcher.RequestMatcher;import org.springframework.stereotype.Component;@Component@RequiredArgsConstructorpublic class SecurityUrls {    private final Environment env;    public static final List<String> CORS_URLS = List.of(        // 프론트엔드 접속용        "http://localhost:3000",        "https://dev.smallchat.kr",        "https://m.dealibird.com",        // Swagger 에서 사용        "http://localhost:8080",        "https://api.dev.smallchat.kr",        "https://api.smallchat.kr" // 상용은 필요없으면 제거..    );    // swagger 경로 - 전개 연산자 사용을 위해 array    private static final String[] SWAGGER_URLS = {"/swagger", "/swagger-ui/*", "/api-docs/*"};    private static final List<HttpMethod> methods = List.of(HttpMethod.GET, HttpMethod.POST, HttpMethod.PUT, HttpMethod.PATCH, HttpMethod.DELETE);    // 퍼블릭 URL 목록 정의 -> 토큰인증 제외됨    // filter 작동 URL은 예외 처리되면 안됨 (로그아웃도)    private static Map<HttpMethod, List<String>> PUBLIC_URI_MAP = new HashMap<>() {{        put(HttpMethod.GET, new ArrayList<>(List.of(            // static 경로            "/js/*", "/css/*", "/image/*",            // 헬스체크            "/monitoring/health",            // public GET 경로 허용            "/demos/public",            "/demos/errors"        )));        put(HttpMethod.POST, new ArrayList<>(List.of(            // public POST 경로 허용            "/demos/public",            "/oauth2/login",            "/oauth2/logout",            "/personalities/on-boarding",            "/token/refresh"        )));        put(HttpMethod.PUT, new ArrayList<>(List.of(            // public PUT 경로 허용            "/demos/public"        )));        put(HttpMethod.PATCH, new ArrayList<>(List.of(            // public PATCH 경로 허용        )));        put(HttpMethod.DELETE, new ArrayList<>(List.of(            // public DELETE 경로            "/demos/public"        )));    }};    // http basic 인증이 사용될 url    // filter 작동 URL은 예외 처리되면 안됨 (로그아웃도)//    private static Map<HttpMethod, List<String>> HTTP_BASIC_AUTH_URL_MAP = new HashMap<>() {{//        put(HttpMethod.GET, new ArrayList<>(List.of(//            // public GET 경로 허용//            "/demos/httpBasic"//        )));//        put(HttpMethod.POST, new ArrayList<>(List.of(//            "/admins/login"//        )));//        put(HttpMethod.PUT, new ArrayList<>(List.of(//        )));//        put(HttpMethod.DELETE, new ArrayList<>(List.of(////        )));//    }};    // Admin 계정 전용 URL 목록 정의//    private static Map<HttpMethod, List<String>> ADMIN_ONLY_URI_MAP = new HashMap<>() {{//        put(HttpMethod.GET, List.of(//            // Admin 전용 경로 테스트//            "/demos/adminOnly"//        ));//        // 다른 HTTP 메소드들에 대한 Admin 전용 경로가 필요한 경우 여기에 추가//    }};    /**     * public 경로 허용을 위한 RequestMatcher 생성     * or Match     * @return     */    public RequestMatcher publicRequestMatcher() {        // 로컬 환경인경우 추가 허용 URL        if (env.acceptsProfiles(Profiles.of("default"))) {            // Swagger 경로            PUBLIC_URI_MAP.get(HttpMethod.GET).addAll(Arrays.asList(SWAGGER_URLS));        }        List<RequestMatcher> publicMatchers = new ArrayList<>();        // 각 메소드별 퍼블릭 url AntPathRequestMatcher 담아주기        methods.forEach(httpMethod -> {            List<String> urls = PUBLIC_URI_MAP.get(httpMethod);            if (urls != null) {                urls.stream()                    .map(url -> new AntPathRequestMatcher(url, httpMethod.toString()))                    .forEach(publicMatchers::add);            }        });        return new OrRequestMatcher(publicMatchers);    }    /**     * Http Basic 인증이 필요한 url     *///    public RequestMatcher httpBasicRequestMatcher() {////        // 로컬 환경이 아닌경우 http basic 인증 필요//        if (!env.acceptsProfiles(Profiles.of("default"))) {//            // Swagger 경로//            HTTP_BASIC_AUTH_URL_MAP.get(HttpMethod.GET).addAll(Arrays.asList(SWAGGER_URLS));//        }////        List<RequestMatcher> httpBasicMatchers = new ArrayList<>();////        // 각 메소드별로 담아주기//        methods.forEach(httpMethod -> {//            List<String> urls = HTTP_BASIC_AUTH_URL_MAP.get(httpMethod);//            if (urls != null) {//                urls.stream()//                    .map(url -> new AntPathRequestMatcher(url, httpMethod.toString()))//                    .forEach(httpBasicMatchers::add);//            }//        });////        return new OrRequestMatcher(httpBasicMatchers);//    }}