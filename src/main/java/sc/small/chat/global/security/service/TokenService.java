package sc.small.chat.global.security.service;import java.util.concurrent.TimeUnit;import lombok.RequiredArgsConstructor;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.ValueOperations;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Service;import sc.small.chat.global.dto.TokenInfoDTO;import sc.small.chat.global.exception.SmallChatHttpException;@Service@RequiredArgsConstructorpublic class TokenService {    private final RedisTemplate<String, TokenInfoDTO> redisTemplate;    private static final long ACCESS_TOKEN_EXPIRE_TIME = 24 * 60 * 60 * 1000L;   ;    public void saveOrUpdate(String username, String refreshToken, String accessToken) {        TokenInfoDTO token = new TokenInfoDTO(username, refreshToken, accessToken);        ValueOperations<String, TokenInfoDTO> opsForValue = redisTemplate.opsForValue();        opsForValue.set(accessToken, token, System.currentTimeMillis() + ACCESS_TOKEN_EXPIRE_TIME, TimeUnit.MILLISECONDS);    }    public TokenInfoDTO findByAccessTokenOrThrow(String accessToken) {        ValueOperations<String, TokenInfoDTO> opsForValue = redisTemplate.opsForValue();        TokenInfoDTO token = opsForValue.get(accessToken);        if (token == null) {            throw new SmallChatHttpException(HttpStatus.NOT_FOUND, "Token not found");        }        return token;    }    public void updateToken(String newAccessToken, TokenInfoDTO token) {        token.setAccessToken(newAccessToken);        saveOrUpdate(token.getUsername(), token.getRefreshToken(), newAccessToken);    }//    RedisTemplate에서는 특정 key(여기서는 accessToken)에 해당하는 데이터를 삭제하는 메서드를 제공합니다.//    따라서 delete 메서드를 통해 accessToken을 사용하여 토큰을 삭제할 수 있습니다.    public void deleteToken(String accessToken) {        redisTemplate.delete(accessToken);    }}