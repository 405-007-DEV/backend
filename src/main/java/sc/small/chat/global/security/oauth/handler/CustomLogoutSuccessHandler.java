package sc.small.chat.global.security.oauth.handler;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.concurrent.TimeUnit;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.security.core.Authentication;import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;import org.springframework.stereotype.Component;import sc.small.chat.global.security.oauth.repository.OAuth2AuthorizationRequestBasedOnCookieRepository;import sc.small.chat.global.security.service.JwtProvider;@Slf4j@Component@RequiredArgsConstructorpublic class CustomLogoutSuccessHandler implements LogoutSuccessHandler {    private final OAuth2AuthorizationRequestBasedOnCookieRepository oAuth2AuthorizationRequestBasedOnCookieRepository;    private final JwtProvider jwtProvider;    private final RedisTemplate<String, String> redisTemplate;    @Override    public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {        if (authentication != null) {            String accessToken = jwtProvider.resolveToken(request);            String username = authentication.getName();            String refreshTokenKey = "RT:" + username;            // Redis에서 Refresh Token 삭제            if (redisTemplate.opsForValue().get(refreshTokenKey) != null) {                redisTemplate.delete(refreshTokenKey);            }            // Access Token 블랙리스트 처리            if (accessToken != null && jwtProvider.validateToken(accessToken)) {                Long expiration = jwtProvider.getExpiration(accessToken);                redisTemplate.opsForValue().set(accessToken, "logout", expiration, TimeUnit.MILLISECONDS);            }            oAuth2AuthorizationRequestBasedOnCookieRepository.removeAuthorizationRequestCookies(request, response);        }    }}