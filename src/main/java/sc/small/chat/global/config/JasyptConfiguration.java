package sc.small.chat.global.config;import java.io.File;import java.io.FileNotFoundException;import java.io.IOException;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import lombok.extern.slf4j.Slf4j;import org.jasypt.encryption.StringEncryptor;import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;import org.jasypt.encryption.pbe.config.SimpleStringPBEConfig;import org.jasypt.iv.RandomIvGenerator;import org.jasypt.salt.RandomSaltGenerator;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.util.ResourceUtils;/** * 서버 정보 암호화 하기위한 ConfigClass 아래의 URL에서 encrypt decrypt 가능 * https://www.devglan.com/online-tools/jasypt-online-encryption-decryption * <p> * application-dev.yml 안에 있는 암호화된 DB 정보를 decrypt 하기 위해선 환경변수에서 값을 직접 입력받아야 합니다. */@Configuration@Slf4jpublic class JasyptConfiguration {    @Bean("jasyptStringEncryptor")    public StringEncryptor stringEncryptor() {        // 환경변수에서 꺼내오기        String masterKey = System.getenv("SPRING_MASTER_KEY");        String key;        if (masterKey != null) {            key = masterKey;        } else {            try {                File file = ResourceUtils.getFile("classpath:key/smallchat.key");                key = Files.readString(file.toPath(), StandardCharsets.UTF_8);            } catch (IOException e) {                throw new RuntimeException("Failed to read encryption key file", e);            }        }        PooledPBEStringEncryptor encryptor = new PooledPBEStringEncryptor();        SimpleStringPBEConfig config = getSimpleStringPBEConfig(key);        encryptor.setConfig(config);        return encryptor;    }    private SimpleStringPBEConfig getSimpleStringPBEConfig(String key) {        SimpleStringPBEConfig config = new SimpleStringPBEConfig();        config.setPassword(key); // 암호화 키        config.setAlgorithm("PBEWithMD5AndDES"); // 사용할 알고리즘        config.setKeyObtentionIterations("1000"); // 해싱 반복 횟수        config.setPoolSize("1"); // Encryptor pool size        config.setSaltGenerator(new RandomSaltGenerator()); // 랜덤 salt 생성기        config.setIvGenerator(new RandomIvGenerator()); // 랜덤 IV 생성기        config.setStringOutputType("base64"); // "hexadecimal", "base64" // 인코딩 될 값        return config;    }}