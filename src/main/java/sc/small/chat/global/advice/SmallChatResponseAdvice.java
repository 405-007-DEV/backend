package sc.small.chat.global.advice;import org.springframework.beans.TypeMismatchException;import org.springframework.boot.context.properties.bind.BindException;import org.springframework.core.MethodParameter;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.http.converter.HttpMessageConverter;import org.springframework.http.converter.HttpMessageNotReadableException;import org.springframework.http.server.ServerHttpRequest;import org.springframework.http.server.ServerHttpResponse;import org.springframework.validation.FieldError;import org.springframework.web.HttpRequestMethodNotSupportedException;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.MissingServletRequestParameterException;import org.springframework.web.bind.ServletRequestBindingException;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.bind.annotation.RestControllerAdvice;import org.springframework.web.multipart.support.MissingServletRequestPartException;import org.springframework.web.servlet.NoHandlerFoundException;import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;import sc.small.chat.global.dto.BasicResponseDTO;import sc.small.chat.global.exception.SmallChatHttpException;@RestControllerAdvicepublic class SmallChatResponseAdvice implements ResponseBodyAdvice<Object> {    private static final String MSG_BAD_REQUEST = "유효한 요청이 아닙니다.";    private static final String MSG_PARAMETER_MISSING = "필수 패러미터가 누락되었습니다.";    private static final String MSG_INTERNAL_SERVER_ERROR = "시스템 오류가 발생했습니다.";    private static final String MSG_NOT_FOUND = "잘못된 요청입니다.";    @Override    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {        return true;    }    @Override    public Object beforeBodyWrite(        Object body,        MethodParameter returnType,        MediaType selectedContentType,        Class<? extends HttpMessageConverter<?>> selectedConverterType,        ServerHttpRequest request,        ServerHttpResponse response) {        // 공통 응답 객체를 사용한 경우 그대로 리턴 - 응답 커스터마이징용        if (body instanceof BasicResponseDTO) {            return body;        }        // Swagger Uri 예외 처리        if (request.getURI().getPath().contains("api/v1/api-docs")) {            return body;        }        return BasicResponseDTO.success(body);    }    @ExceptionHandler(SmallChatHttpException.class)    public ResponseEntity<Object> handleExceptionCustom(SmallChatHttpException e) {        e.printStackTrace();        return ResponseEntity            .status(e.getCode())            .body(BasicResponseDTO.error(e.getHttpStatus(), e.getMessage()));    }    @ExceptionHandler(MethodArgumentNotValidException.class)    @ResponseStatus(HttpStatus.BAD_REQUEST)    public BasicResponseDTO<Object> handleExceptionNotValid(MethodArgumentNotValidException e) {        String validation = e.getBindingResult().getFieldErrors().stream()            .map(FieldError::getField)            .reduce((a, b) -> a + " / " + b)            .orElse("");        e.printStackTrace();        return BasicResponseDTO.error(MSG_BAD_REQUEST, validation.isEmpty() ? null : validation);    }    @ExceptionHandler({        MissingServletRequestParameterException.class,        ServletRequestBindingException.class,        TypeMismatchException.class,        HttpMessageNotReadableException.class,        MissingServletRequestPartException.class,        BindException.class,        HttpRequestMethodNotSupportedException.class    })    @ResponseStatus(HttpStatus.BAD_REQUEST)    public BasicResponseDTO<Object> handleException400(Exception e) {        e.printStackTrace();        if (e instanceof MissingServletRequestParameterException) {            return BasicResponseDTO.error(MSG_PARAMETER_MISSING);        } else {            return BasicResponseDTO.error(MSG_BAD_REQUEST);        }    }    @ExceptionHandler(NoHandlerFoundException.class)    @ResponseStatus(HttpStatus.NOT_FOUND)    public BasicResponseDTO<Object> handleException404(NoHandlerFoundException e) {        e.printStackTrace();        return BasicResponseDTO.error(HttpStatus.NOT_FOUND, MSG_NOT_FOUND);    }    @ExceptionHandler(Exception.class)    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)    public BasicResponseDTO<Object> handleException500(Exception e) {        e.printStackTrace();        return BasicResponseDTO.error(HttpStatus.INTERNAL_SERVER_ERROR, MSG_INTERNAL_SERVER_ERROR);    }}