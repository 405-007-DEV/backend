package sc.small.chat.global.dto;import com.fasterxml.jackson.annotation.JsonIgnore;import io.swagger.v3.oas.annotations.media.Schema;import java.sql.Timestamp;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import lombok.Data;import lombok.Getter;import lombok.Setter;public class BasicRequestDTO {    /**     * 페이징 처리용 요청 필터 DTO 클래스     * <p>     * page, size 포함     */    @Getter    @Setter    @Data    public static class PageRequest {        private int page = 1;        private int size = 15;    }    /**     * 날짜(yyyy-MM-dd) + 페이징 DTO     * <p>     * startDate, endDate, startTimestamp, endTimestamp 포함     * page, size 포함     */    @Getter    @Setter    public static class DatePageRequest extends PageRequest {        @Schema(description = "조회 시작 날짜", example = "yyyy-MM-dd")        private String startDate = "";        @Schema(description = "조회 종료 날짜", example = "yyyy-MM-dd")        private String endDate = "";        @JsonIgnore        private Long monthsToSubtract = null;        @JsonIgnore        private boolean isOneWeek = false;        public DatePageRequest() {            if (startDate.isBlank() || endDate.isBlank()) {                endDate = DateTimeFormatter.ofPattern("yyyy-MM-dd").format(LocalDate.now());                startDate = isOneWeek ?                    DateTimeFormatter.ofPattern("yyyy-MM-dd").format(LocalDate.now().minusWeeks(1)) :                    (monthsToSubtract != null ?                        DateTimeFormatter.ofPattern("yyyy-MM-dd").format(LocalDate.now().minusMonths(monthsToSubtract)) :                        DateTimeFormatter.ofPattern("yyyy-MM-dd").format(LocalDate.of(2019, 1, 1))                    );            }        }        @Schema(hidden = true)        public Timestamp getStartTimestamp() {            return Timestamp.valueOf(startDate + " 00:00:00");        }        @Schema(hidden = true)        public Timestamp getEndTimestamp() {            return Timestamp.valueOf(LocalDate.parse(endDate).plusDays(1).toString() + " 00:00:00");        }    }    /**     * 날짜(yyyy-MM-dd HH:mm:ss) + 페이징 DTO     * <p>     * startDate, endDate, startTimestamp, endTimestamp 포함     * page, size 포함     */    @Getter    @Setter    public static class DateTimePageRequest extends PageRequest {        private String startDate;        private String endDate;        public DateTimePageRequest() {            this.startDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss").format(LocalDateTime.now());            this.endDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss").format(LocalDateTime.now());        }        public Timestamp getStartTimestamp() {            return Timestamp.valueOf(startDate);        }        public Timestamp getEndTimestamp() {            return Timestamp.valueOf(LocalDate.parse(endDate).plusDays(1).toString());        }    }    /**     * 날짜(yyyy-MM-dd) Only DTO     * <p>     * startDate, endDate, startTimestamp, endTimestamp 포함     * 페이징 비포함     */    @Getter    @Setter    public static class DateOnlyRequest {        @Schema(description = "조회 시작 날짜", example = "yyyy-MM-dd")        private String startDate;        @Schema(description = "조회 종료 날짜", example = "yyyy-MM-dd")        private String endDate;        @JsonIgnore        private Long daysToSubtract = 30L;        public DateOnlyRequest() {            if (startDate == null || startDate.isBlank()) {                if (endDate == null || endDate.isBlank()) {                    endDate = DateTimeFormatter.ofPattern("yyyy-MM-dd").format(LocalDate.now());                }                startDate = DateTimeFormatter.ofPattern("yyyy-MM-dd").format(LocalDate.parse(endDate).minusDays(daysToSubtract));            } else {                if (endDate == null || endDate.isBlank()) {                    LocalDate tempEndDate = LocalDate.parse(startDate).plusDays(daysToSubtract);                    if (tempEndDate.isAfter(LocalDate.now())) {                        tempEndDate = LocalDate.now();                    }                    endDate = DateTimeFormatter.ofPattern("yyyy-MM-dd").format(tempEndDate);                }            }        }        @Schema(hidden = true)        public Timestamp getStartTimestamp() {            return Timestamp.valueOf(startDate + " 00:00:00");        }        @Schema(hidden = true)        public Timestamp getEndTimestamp() {            return Timestamp.valueOf(LocalDate.parse(endDate).plusDays(1).toString() + " 00:00:00");        }    }    /**     * 날짜(yyyy-MM-dd HH:mm:ss) Only DTO     * <p>     * startDate, endDate, startTimestamp, endTimestamp 포함     * 페이징 비포함     */    @Getter    @Setter    public static class DateTimeOnlyRequest {        private String startDate;        private String endDate;        public DateTimeOnlyRequest() {            this.startDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss").format(LocalDateTime.now());            this.endDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss").format(LocalDateTime.now());        }        public Timestamp getStartTimestamp() {            return Timestamp.valueOf(startDate);        }        public Timestamp getEndTimestamp() {            return Timestamp.valueOf(LocalDate.parse(endDate).plusDays(1).toString());        }    }}