package sc.small.chat.member.dto;import io.swagger.v3.oas.annotations.media.Schema;import jakarta.validation.constraints.Max;import jakarta.validation.constraints.Min;import jakarta.validation.constraints.NotBlank;import jakarta.validation.constraints.Pattern;import jakarta.validation.constraints.Size;import java.util.List;import lombok.AllArgsConstructor;import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import net.minidev.json.annotate.JsonIgnore;import sc.small.chat.global.util.TimeUtil;import sc.small.chat.profile.entiy.Career;import sc.small.chat.profile.entiy.Job;import sc.small.chat.profile.entiy.Profile;import sc.small.chat.profile.enums.CareerType;@Getter@Setter@Builder@Schema(description = "회원가입 DTO", name = "SignUpDTO")public class SignUpDTO {    @Getter    @Setter    @Builder    @NoArgsConstructor    @AllArgsConstructor    @Schema(description = "회원가입 요청 DTO", name = "SignUpRequestDTO")    public static class Request {        @Schema(description = "성향 ID", example = "123", type = "Long")        private Long personalityId;        @Schema(description = "프로필 정보")        private SignUpProfileRequestDTO signUpProfileRequestDTO;    }    @Getter    @Setter    @Builder    @NoArgsConstructor    @AllArgsConstructor    @Schema(description = "프로필 요청 DTO", name = "SignUpProfileRequestDTO")    public static class SignUpProfileRequestDTO {        @NotBlank(message = "닉네임은 필수 입력 값입니다.")        @Size(min = 2, max = 6, message = "닉네임은 2글자 이상 6글자 이하이어야 합니다.")        @Pattern(regexp = "^[a-zA-Z0-9가-힣]*$", message = "닉네임은 영문, 숫자, 한글만 가능하며 특수기호는 사용할 수 없습니다.")        private String nickname;        @Min(value = 0, message = "연차는 최소 0이어야 합니다.")        @Max(value = 50, message = "연차는 최대 50이어야 합니다.")        private int years;        private List<SignUpJobRequestDTO> profileJobs;        private List<SignUpCareerRequestDTO> careers;        @JsonIgnore        public Profile toEntity() {            return Profile.builder()                .nickname(getNickname())                .years(getYears())                .build();        }    }    @Getter    @Setter    @Builder    @NoArgsConstructor    @AllArgsConstructor    @Schema(description = "직업 요청 DTO", name = "SignUpJobRequestDTO")    public static class SignUpJobRequestDTO {        @Schema(name = "name", description = "직업명", example = "PM/PO", type = "String")        private String name;        @Schema(name = "isWritten", description = "직접 입력인지 여부", example = "true", type = "boolean")        private boolean isWritten;        @JsonIgnore        public Job toEntity() {            return Job.builder()                .name(getName())                .isWritten(isWritten())                .build();        }    }    @Getter    @Setter    @Builder    @NoArgsConstructor    @AllArgsConstructor    @Schema(description = "경력 요청 DTO", name = "SignUpCareerRequestDTO")    public static class SignUpCareerRequestDTO {        @Size(min = 1, max = 30, message = "회사명은 1글자 이상 30글자 이하이어야 합니다.")        private String companyName;        @NotBlank        @Schema(description = "포지션 (위 직업명의 값)", example = "PM/PO", type = "String")        private String position;        @NotBlank        @Schema(description = "경력 시작일", example = "2023-01", type = "String")        private String careerStartedAt;        @NotBlank        @Schema(description = "경력 종료일", example = "2023-01", type = "String")        private String careerEndedAt;        @NotBlank        @Schema(description = "경력 유형 (인턴/정규직/경력직)", example = "인턴", type = "String")        private String careerType;        @Schema(hidden = true)        public CareerType getEnumCareerType() {            return CareerType.typeOf(careerType);        }        @JsonIgnore        public Career toEntity() {            return Career.builder()                .companyName(getCompanyName())                .position(getPosition())                .careerStartedAt(TimeUtil.convertStringToTimestamp(getCareerStartedAt()))                .careerEndedAt(TimeUtil.convertStringToTimestamp(getCareerEndedAt()))                .careerType(getEnumCareerType())                .build();        }    }    @Getter    @Setter    @Builder    @NoArgsConstructor    @AllArgsConstructor    @Schema(description = "회원가입 완료 DTO", name = "SignUpResponseDTO")    public static class Response {        private String message;    }}