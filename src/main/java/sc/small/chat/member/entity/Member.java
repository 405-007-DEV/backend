package sc.small.chat.member.entity;import jakarta.persistence.CascadeType;import jakarta.persistence.Column;import jakarta.persistence.Entity;import jakarta.persistence.GeneratedValue;import jakarta.persistence.GenerationType;import jakarta.persistence.Id;import jakarta.persistence.OneToMany;import jakarta.persistence.Table;import java.sql.Timestamp;import java.util.ArrayList;import java.util.List;import lombok.Getter;import lombok.NoArgsConstructor;import org.hibernate.annotations.SQLDelete;import org.hibernate.annotations.SQLRestriction;import sc.small.chat.global.entity.BaseEntity;import sc.small.chat.oauth.entity.OAuthProfile;import sc.small.chat.personality.entity.Personality;@Entity@Table(name = "members")@Getter@NoArgsConstructor@SQLRestriction("deleted_at IS NULL")@SQLDelete(sql = "UPDATE members SET deleted_at = NOW() WHERE id = ?")public class Member extends BaseEntity {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    @Column(name = "daily_small_chat_count")    private int dailySmallChatCount;    @Column(name = "deleted_at")    private Timestamp deletedAt;    @OneToMany(mappedBy = "member", cascade = CascadeType.ALL)    private List<OAuthProfile> oAuthProfiles = new ArrayList<>();    @OneToMany(mappedBy = "member", cascade = CascadeType.ALL)    private List<Personality> personalities = new ArrayList<>();}