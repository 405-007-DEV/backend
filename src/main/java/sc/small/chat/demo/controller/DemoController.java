package sc.small.chat.demo.controller;import io.swagger.v3.oas.annotations.tags.Tag;import lombok.RequiredArgsConstructor;import org.jasypt.encryption.StringEncryptor;import org.springframework.core.env.Environment;import org.springframework.core.env.Profiles;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import sc.small.chat.demo.dto.TextDTO;@Tag(name="Demo")@RestController@RequiredArgsConstructor@RequestMapping("/demos")public class DemoController {    private final Environment env;    private final StringEncryptor jasyptStringEncryptor;    /**     * 암호화 요청 함수 - 로컬전용     * 기본적으로 로컬에선 key가 존재하지 않음     */    @PostMapping("/encrypt")    public TextDTO encrypt(@RequestBody(required = true) TextDTO textDTO) {        System.out.println("text: " + textDTO);        if (env.acceptsProfiles(Profiles.of("default"))) {            return new TextDTO(jasyptStringEncryptor.encrypt(textDTO.text()));        } else {            return new TextDTO("요청 실행 불가 환경입니다.");        }    }    /**     * 복호화 요청 함수 - 로컬전용 (값 확인용)     * 기본적으로 로컬에선 key가 존재하지 않음     */    @PostMapping("/decrypt")    public TextDTO decrypt(@RequestBody(required = true) TextDTO textDTO) {        System.out.println("text: " + textDTO);        if (env.acceptsProfiles(Profiles.of("default"))) {            return new TextDTO(jasyptStringEncryptor.decrypt(textDTO.text()));        } else {            return new TextDTO("요청 실행 불가 환경입니다.");        }    }}