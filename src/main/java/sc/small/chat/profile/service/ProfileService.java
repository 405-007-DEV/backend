package sc.small.chat.profile.service;import java.util.Set;import java.util.stream.Collectors;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import sc.small.chat.member.dto.SignUpDTO.SignUpProfileRequestDTO;import sc.small.chat.oauth.entity.OAuthProfile;import sc.small.chat.profile.dto.ChangeProfileOpenDTO.ChangeProfileOpenResponseDTO;import sc.small.chat.profile.entiy.Career;import sc.small.chat.profile.entiy.Job;import sc.small.chat.profile.entiy.Profile;import sc.small.chat.profile.entiy.ProfileJob;@Slf4j@Service@RequiredArgsConstructorpublic class ProfileService {    private final ProfileJobService profileJobService;    private final CareerService careerService;    @Transactional    public Profile saveForSignUp(SignUpProfileRequestDTO signUpProfileRequestDTO) {        Profile profile = signUpProfileRequestDTO.toEntity();        Set<ProfileJob> profileJobs = signUpProfileRequestDTO.getProfileJobs().stream()            .map(dto -> {                Job job = dto.toEntity();                return ProfileJob.builder()                    .profile(profile)                    .job(job)                    .build();            }).collect(Collectors.toSet());        Set<Career> careers = signUpProfileRequestDTO.getCareers().stream()            .map(dto -> careerService.saveForSignUp(dto, profile))            .collect(Collectors.toSet());        profileJobService.saveForSignUp(profileJobs);        return profile;    }    @Transactional    public ChangeProfileOpenResponseDTO updateProfileOpen(OAuthProfile oAuthProfile , boolean open) {        oAuthProfile.getMember().getProfile().setOpen(open);        return new ChangeProfileOpenResponseDTO("프로필 공개 여부 변경에 성공했습니다.");    }}