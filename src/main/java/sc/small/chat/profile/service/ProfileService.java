package sc.small.chat.profile.service;import java.util.List;import java.util.stream.Collectors;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import sc.small.chat.global.exception.SmallChatHttpException;import sc.small.chat.global.security.entity.User;import sc.small.chat.member.dto.SignUpDTO.SignUpProfileRequestDTO;import sc.small.chat.oauth.entity.OAuthProfile;import sc.small.chat.oauth.repository.OAuth2ProfileRepository;import sc.small.chat.profile.dto.ChangeProfileOpenDTO.ChangeProfileOpenResponseDTO;import sc.small.chat.profile.dto.ProfileDTO.CareerDTO;import sc.small.chat.profile.dto.ProfileDTO.JobDTO;import sc.small.chat.profile.dto.ProfileDTO.ProfileResponseDTO;import sc.small.chat.profile.dto.ProfileDTO.TopicDTO;import sc.small.chat.profile.dto.UpdateProfileDTO;import sc.small.chat.profile.entiy.Career;import sc.small.chat.profile.entiy.Job;import sc.small.chat.profile.entiy.Profile;import sc.small.chat.profile.entiy.ProfileJob;import sc.small.chat.profile.entiy.Topic;import sc.small.chat.profile.repository.CareerRepository;import sc.small.chat.profile.repository.ProfileRepositoryDSL;import sc.small.chat.profile.repository.TopicRepository;@Slf4j@Service@RequiredArgsConstructorpublic class ProfileService {    private final ProfileJobService profileJobService;    private final CareerRepository careerRepository;    private final TopicRepository topicRepository;    private final OAuth2ProfileRepository oAuth2ProfileRepository;    private final ProfileRepositoryDSL profileRepositoryDSL;    public ProfileResponseDTO getProfile(Long profileId) {        ProfileResponseDTO profile = profileRepositoryDSL.findProfile(profileId);        List<CareerDTO> careers = profileRepositoryDSL.findCareers(profile.getId());        List<JobDTO> jobs = profileRepositoryDSL.findJobs(profile.getId());        List<TopicDTO> topics = profileRepositoryDSL.findTopics(profile.getId());        profile.setCareers(careers);        profile.setJobs(jobs);        profile.setTopics(topics);        return profile;    }    @Transactional    public Profile saveForSignUp(SignUpProfileRequestDTO request) {        Profile profile = request.toEntity();        List<ProfileJob> profileJobs = request.getProfileJobs().stream()            .map(dto -> {                Job job = dto.toEntity();                return ProfileJob.builder()                    .profile(profile)                    .job(job)                    .build();            }).collect(Collectors.toList());        List<Career> careers = request.getCareers().stream()            .map(dto -> {                Career career = dto.toEntity();                career.setProfile(profile);                return careerRepository.save(career);            }).toList();        profileJobService.saveAll(profileJobs);        return profile;    }    @Transactional    public UpdateProfileDTO.Response updateProfile(UpdateProfileDTO.Request request) {        try {            Profile profile = getOAuthProfile().getMember().getProfile();            // 기존의 직무 정보, 이력 정보, 스몰챗 주제들 삭제            profileJobService.deleteAll(profile.getProfileJobs());            careerRepository.deleteAll(profile.getCareers());            topicRepository.deleteAll(profile.getTopics());            // 새로운 직무 정보, 이력 정보, 스몰챗 주제들 생성            List<ProfileJob> profileJobs = request.getProfileJobs().stream()                .map(dto -> {                    Job job = dto.toEntity();                    return ProfileJob.builder()                        .profile(profile)                        .job(job)                        .build();                }).toList();            List<Career> careers = request.getCareers().stream()                .map(dto -> {                    Career career = dto.toEntity();                    career.setProfile(profile);                    return careerRepository.save(career);                }).toList();            List<Topic> topics = request.getTopics().stream()                .map(dto -> {                    Topic topic = dto.toEntity();                    topic.setProfile(profile);                    return topicRepository.save(topic);                }).toList();            profileJobService.saveAll(profileJobs);            profile.updateProfile(request);        } catch (Exception e) {            log.error("프로필 수정 중 오류가 발생했습니다. : {}", e.getMessage());            throw new RuntimeException("오류가 발생했습니다. 잠시 후에 다시 시도해보세요.");        }        return new UpdateProfileDTO.Response("프로필을 수정했습니다.");    }    @Transactional    public ChangeProfileOpenResponseDTO updateProfileOpen(OAuthProfile oAuthProfile, boolean open) {        oAuthProfile.getMember().getProfile().setOpen(open);        return new ChangeProfileOpenResponseDTO("프로필 공개 여부 변경에 성공했습니다.");    }    private OAuthProfile getOAuthProfile() {        OAuthProfile oAuthProfile = oAuth2ProfileRepository.findByProviderId(            User.getCurrentUser().getOAuthProfileProviderId());        if (oAuthProfile == null) {            throw new SmallChatHttpException(HttpStatus.UNAUTHORIZED, "권한이 없는 사용자입니다.");        }        return oAuthProfile;    }}