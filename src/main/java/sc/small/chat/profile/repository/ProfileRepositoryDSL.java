package sc.small.chat.profile.repository;import static sc.small.chat.member.entity.QMember.member;import static sc.small.chat.oauth.entity.QOAuthProfile.oAuthProfile;import static sc.small.chat.profile.entiy.QCareer.career;import static sc.small.chat.profile.entiy.QJob.job;import static sc.small.chat.profile.entiy.QProfile.profile;import static sc.small.chat.profile.entiy.QProfileJob.profileJob;import static sc.small.chat.profile.entiy.QTopic.topic;import com.querydsl.core.types.dsl.BooleanExpression;import com.querydsl.jpa.impl.JPAQueryFactory;import java.util.List;import lombok.RequiredArgsConstructor;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.support.PageableExecutionUtils;import org.springframework.stereotype.Repository;import sc.small.chat.profile.dto.AllProfileDTO;import sc.small.chat.profile.dto.AllProfileDTO.Response;import sc.small.chat.profile.dto.ProfileDTO.CareerDTO;import sc.small.chat.profile.dto.ProfileDTO.JobDTO;import sc.small.chat.profile.dto.ProfileDTO.ProfileResponseDTO;import sc.small.chat.profile.dto.ProfileDTO.TopicDTO;import sc.small.chat.profile.dto.QAllProfileDTO_Response;import sc.small.chat.profile.dto.QProfileDTO_CareerDTO;import sc.small.chat.profile.dto.QProfileDTO_JobDTO;import sc.small.chat.profile.dto.QProfileDTO_ProfileResponseDTO;import sc.small.chat.profile.dto.QProfileDTO_TopicDTO;import sc.small.chat.profile.dto.QRecommendProfileDTO_Response;import sc.small.chat.profile.dto.RecommendProfileDTO;@Repository@RequiredArgsConstructorpublic class ProfileRepositoryDSL {    private final JPAQueryFactory jpaQueryFactory;    public ProfileResponseDTO findProfile(Long profileId) {        return jpaQueryFactory.select(new QProfileDTO_ProfileResponseDTO(                profile.id,                profile.nickname,                oAuthProfile.picture,                profile.years,                profile.introduction            )).from(profile)            .innerJoin(member).on(profile.id.eq(member.profile.id))            .innerJoin(oAuthProfile).on(oAuthProfile.member.id.eq(oAuthProfile.id))            .where(profile.id.eq(profileId))            .fetchOne();    }    public List<CareerDTO> findCareers(Long profileId) {        return jpaQueryFactory.select(new QProfileDTO_CareerDTO(                career.id,                career.companyName,                career.position,                career.careerType,                career.careerStartedAt,                career.careerEndedAt            )).from(career)            .where(career.profile.id.eq(profileId))            .fetch();    }    public List<JobDTO> findJobs(Long profileId) {        return jpaQueryFactory.select(new QProfileDTO_JobDTO(                job.id,                job.name,                job.isWritten            ))            .from(profile)            .innerJoin(profileJob).on(profile.id.eq(profileJob.profile.id))            .innerJoin(job).on(profileJob.job.id.eq(job.id))            .where(profile.id.eq(profileId))            .fetch();    }    public List<TopicDTO> findTopics(Long profileId) {        return jpaQueryFactory.select(new QProfileDTO_TopicDTO(                topic.id,                topic.content            ))            .from(profile)            .innerJoin(topic).on(profile.id.eq(profileJob.profile.id))            .where(profile.id.eq(profileId))            .fetch();    }    public Page<AllProfileDTO.Response> findAllProfiles(AllProfileDTO.Request request, PageRequest pageable) {        List<AllProfileDTO.Response> content = jpaQueryFactory.select(new QAllProfileDTO_Response(                profile.nickname,                job.name,                job.isWritten,                profile.years            )).from(profile)            .innerJoin(profileJob).on(profile.id.eq(profileJob.profile.id))            .innerJoin(job).on(profileJob.job.id.eq(job.id))            .where(                isProfileOpen(),                searchByNickname(request.getNickname()),                searchByJobName(request.getJobName()),                searchByYearsType(request.getYearsType())            )            .orderBy(profile.createdAt.desc())            .fetch();        long totalCount = (pageable.getPageSize() != Integer.MAX_VALUE) ? jpaQueryFactory                .select(new QAllProfileDTO_Response(                    profile.nickname,                    job.name,                    job.isWritten,                    profile.years                )).from(profile)                .innerJoin(profileJob).on(profile.id.eq(profileJob.profile.id))                .innerJoin(job).on(profileJob.job.id.eq(job.id))                .where(                    isProfileOpen(),                    searchByNickname(request.getNickname()),                    searchByJobName(request.getJobName()),                    searchByYearsType(request.getYearsType())                )                .fetch().size() : 0L;        return PageableExecutionUtils.getPage(content, pageable, () -> totalCount);    }//    public List<RecommendProfileDTO> findRecommendProfiles(Long profileId) {//        return jpaQueryFactory.select(new QRecommendProfileDTO_Response(//                profile.nickname,//                job.name,//                job.isWritten,//                profile.years//            )).from(profile)//            .innerJoin(profileJob).on(profile.id.eq(profileJob.profile.id))//            .innerJoin(job).on(profileJob.job.id.eq(job.id))//            .where(//                isProfileOpen(),//                searchByNickname(request.getNickname()),//                searchByJobName(request.getJobName()),//                searchByYearsType(request.getYearsType())//            )//            .orderBy(profile.createdAt.desc())//            .fetch();//    }    private BooleanExpression isProfileOpen() {        return profile.isOpen.eq(true);    }    private BooleanExpression searchByNickname(String nickname) {        return nickname != null ? profile.nickname.contains(nickname) : null;    }    private BooleanExpression searchByJobName(String jobName) {        return jobName != null ? job.name.eq(jobName) : null;    }    private BooleanExpression searchByYearsType(String yearsType) {        if (yearsType != null) {            if (yearsType.equals("전체")) {                return null;            } else if (yearsType.equals("주니어")) {                return profile.years.between(1,4);            } else if (yearsType.equals("미들")) {                return profile.years.between(5, 8);            } else if (yearsType.equals("시니어")) {                return profile.years.gt(9);            }        }        return null;    }}