package sc.small.chat.profile.repository;import static sc.small.chat.member.entity.QMember.member;import static sc.small.chat.oauth.entity.QOAuthProfile.oAuthProfile;import static sc.small.chat.profile.entiy.QCareer.career;import static sc.small.chat.profile.entiy.QJob.job;import static sc.small.chat.profile.entiy.QProfile.profile;import static sc.small.chat.profile.entiy.QProfileJob.profileJob;import static sc.small.chat.profile.entiy.QTopic.topic;import com.querydsl.jpa.impl.JPAQueryFactory;import java.util.List;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Repository;import sc.small.chat.profile.dto.ProfileDTO.CareerDTO;import sc.small.chat.profile.dto.ProfileDTO.JobDTO;import sc.small.chat.profile.dto.ProfileDTO.ProfileResponseDTO;import sc.small.chat.profile.dto.ProfileDTO.TopicDTO;import sc.small.chat.profile.dto.QProfileDTO_CareerDTO;import sc.small.chat.profile.dto.QProfileDTO_JobDTO;import sc.small.chat.profile.dto.QProfileDTO_ProfileResponseDTO;import sc.small.chat.profile.dto.QProfileDTO_TopicDTO;@Repository@RequiredArgsConstructorpublic class ProfileRepositoryDSL {    private final JPAQueryFactory jpaQueryFactory;    public ProfileResponseDTO findProfile(Long profileId) {        return jpaQueryFactory.select(new QProfileDTO_ProfileResponseDTO(                profile.id,                profile.nickname,                oAuthProfile.picture,                profile.years,                profile.introduction            )).from(profile)            .innerJoin(member).on(profile.id.eq(member.profile.id))            .innerJoin(oAuthProfile).on(oAuthProfile.member.id.eq(oAuthProfile.id))            .where(profile.id.eq(profileId))            .fetchOne();    }    public List<CareerDTO> findCareers(Long profileId) {        return jpaQueryFactory.select(new QProfileDTO_CareerDTO(                career.id,                career.companyName,                career.position,                career.careerType,                career.careerStartedAt,                career.careerEndedAt            )).from(career)            .where(career.profile.id.eq(profileId))            .fetch();    }    public List<JobDTO> findJobs(Long profileId) {        return jpaQueryFactory.select(new QProfileDTO_JobDTO(                job.id,                job.name,                job.isWritten            ))            .from(profile)            .innerJoin(profileJob).on(profile.id.eq(profileJob.profile.id))            .innerJoin(job).on(profileJob.job.id.eq(job.id))            .where(profile.id.eq(profileId))            .fetch();    }    public List<TopicDTO> findTopics(Long profileId) {        return jpaQueryFactory.select(new QProfileDTO_TopicDTO(                topic.id,                topic.content            ))            .from(profile)            .innerJoin(topic).on(profile.id.eq(profileJob.profile.id))            .where(profile.id.eq(profileId))            .fetch();    }}