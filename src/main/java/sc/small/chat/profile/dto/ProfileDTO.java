package sc.small.chat.profile.dto;import com.querydsl.core.annotations.QueryProjection;import io.swagger.v3.oas.annotations.media.Schema;import java.sql.Timestamp;import java.util.List;import lombok.Builder;import lombok.Data;import lombok.Getter;import lombok.Setter;import sc.small.chat.profile.enums.CareerType;@Getter@Setter@Builderpublic class ProfileDTO {    @Data    @Schema(description = "프로필 조회 응답 DTO", name = "ProfileResponseDTO")    public static class ProfileResponseDTO {        @Schema(description = "프로필 ID", example = "123", type = "Long")        private Long profileId;        @Schema(description = "닉네임", example = "블라블라")        private String nickname;        @Schema(description = "프로필 사진", example = "https://smallchat.com/profile/123.jpg")        private String picture;        @Schema(description = "연차", example = "3")        private int years;        @Schema(description = "소개", example = "안녕하세요")        private String introduction;        @Schema(description = "경력 정보")        private List<CareerDTO> careers;        @Schema(description = "직무")        private List<JobDTO> jobs;        @Schema(description = "스몰톡 주제")        private List<TopicDTO> topics;        @QueryProjection        public ProfileResponseDTO(Long profileId, String nickname, String picture, int years, String introduction) {            this.profileId = profileId;            this.nickname = nickname;            this.picture = picture;            this.years = years;            this.introduction = introduction;        }    }    @Data    @Schema(description = "경력 DTO", name = "CareerDTO")    public static class CareerDTO {        @Schema(description = "경력 ID", example = "123", type = "Long")        private Long careerId;        @Schema(description = "회사명", example = "스몰챗")        private String companyName;        @Schema(description = "포지션", example = "개발자")        private String position;        @Schema(hidden = true)        private CareerType type;        @Schema(description = "경력 시작일", example = "2021-01-01 00:00:00", type = "Timestamp")        private Timestamp careerStartedAt;        @Schema(description = "경력 종료일", example = "2021-01-01 00:00:00", type = "Timestamp")        private Timestamp careerEndedAt;        @QueryProjection        public CareerDTO(Long careerId, String companyName, String position, CareerType type, Timestamp careerStartedAt, Timestamp careerEndedAt) {            this.careerId = careerId;            this.companyName = companyName;            this.position = position;            this.type = type;            this.careerStartedAt = careerStartedAt;            this.careerEndedAt = careerEndedAt;        }        @Schema(description = "경력 유형", example = "인턴/정규직/경력직")        private String careerType(CareerType type) {            return type.getDisplayName();        }    }    @Data    @Schema(description = "직업 DTO", name = "JobDTO")    public static class JobDTO {        @Schema(description = "직업 ID", example = "123", type = "Long")        private Long jobId;        @Schema(description = "직업명", example = "PM/PO")        private String name;        @Schema(description = "직접 입력 여부", example = "true")        private boolean isWritten;        @QueryProjection        public JobDTO(Long jobId, String name, boolean isWritten) {            this.jobId = jobId;            this.name = name;            this.isWritten = isWritten;        }    }    @Data    @Schema(description = "스몰톡 주제 DTO", name = "TopicDTO")    public static class TopicDTO {        @Schema(description = "스몰톡 주제 ID", example = "123", type = "Long")        private Long topicId;        @Schema(description = "스몰톡 주제", example = "최근 관심있는 개발 이슈")        private String content;        @QueryProjection        public TopicDTO(Long topicId, String content) {            this.topicId = topicId;            this.content = content;        }    }}