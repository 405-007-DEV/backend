package sc.small.chat.profile.entiy;import jakarta.persistence.CascadeType;import jakarta.persistence.Column;import jakarta.persistence.Entity;import jakarta.persistence.GeneratedValue;import jakarta.persistence.GenerationType;import jakarta.persistence.Id;import jakarta.persistence.OneToMany;import jakarta.persistence.OneToOne;import jakarta.persistence.Table;import java.util.ArrayList;import java.util.List;import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;import org.hibernate.annotations.SQLDelete;import org.hibernate.annotations.SQLRestriction;import sc.small.chat.global.entity.BaseEntity;import sc.small.chat.member.entity.Member;import sc.small.chat.profile.dto.UpdateProfileDTO;@Entity@Table(name = "profiles")@Getter@NoArgsConstructor@SQLRestriction("deleted_at IS NULL")@SQLDelete(sql = "UPDATE profiles SET deleted_at = NOW() WHERE id = ?")public class Profile extends BaseEntity {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    @Column(name = "nickname")    private String nickname;    @Column(name = "years")    private int years;    @Column(name = "introduction")    private String introduction;    @Column(name = "is_open")    private boolean isOpen = true;    @OneToOne(mappedBy = "profile")    private Member member;    @OneToMany(mappedBy = "profile", cascade = CascadeType.PERSIST)    private List<ProfileJob> profileJobs = new ArrayList<>();    @OneToMany(mappedBy = "profile", cascade = CascadeType.PERSIST)    private List<Career> careers = new ArrayList<>();    @OneToMany(mappedBy = "profile", cascade = CascadeType.PERSIST)    private List<Topic> topics = new ArrayList<>();    @Builder    public Profile(String nickname, int years) {        this.nickname = nickname;        this.years = years;    }    public void setOpen(boolean open) {        isOpen = open;    }    public void updateProfile(UpdateProfileDTO.Request dto) {        this.nickname = dto.getNickname();        this.years = dto.getYears();        this.introduction = dto.getIntroduction();    }}